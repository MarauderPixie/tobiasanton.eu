---
title: "sugr: data preparation"
subtitle: "Preparation of Continouos Glucose Measurements for usage in a shiny app"
image: "thumbs/diabetic.jpg"
author: "Tobias"
date: "08. Feb, 2023"
---

::: tldr
**tl;dr:** CGMs are a great source of (timeseries) data to tinker with. Here I describe the process of cleaning up and preparing the data of Medtronics systems in order to use it in a shiny app.
:::

```{r init}
#| include: false
library(tidyverse)
library(lubridate)
```

# Abstract

I'm a type I diabetic and therefore use an insulin pump and a connected CGM - continouos glucose measurement - system from Medtronic. The company kindly provides access to the raw data, even though only by the use of propriatory software and a web interface. This means I can't access the data through some sort of API to automate the collection thereof and have to run through that process manually on a regular basis.

Apart from that minor nuisance what's more important though is the fact that the data needs some touch-ups before you can actually use them:

- data from the pump and the GCM sensor are basically two different datasets but kept in the same csv
- while the time interval is 5 minutes (a reading from the GCM), not much else is going on otherwise
- direct blood glucose measurements, insulin doses, etc. are delivered _whenever_ and not on-point of the 5min intervals

Here I'll walk through the process of cleaning that up.

# Reading the Raw Data

First let's have a look at what we've got here. To save ourselves some headaches, I already put all the settings in all the places such that we get a nice tabular dataset. Most should be pretty self-explanatory: entries are delimited by a semicolon, the date format has to be sepcified and so on. I set `skip = 6` because, well, that's where the actual csv entries actually begin. Beforehand it's just some unstructured data about the device, patient, date of recordng, etc.

::: {.panel-tabset}

## Code

```{r b1_read_data}
data_raw <- read_delim("data/sugr/carelink-export-220217.csv", 
                  delim = ";", escape_double = FALSE, 
                  col_types = cols(Date = col_date(format = "%Y/%m/%d"), 
                                   Time = col_time(format = "%H:%M:%S")), 
                  locale = locale(decimal_mark = ","), 
                  trim_ws = TRUE, skip = 6)
```

## Glimpse

```{r b1_glimpse}
glimpse(data_raw)
```

## Warning

```{r b1_warning}
problems(data_raw) %>% select(-file) %>% print(n = 120)
```
:::

Okay, so, a **Warning**. What's that about?

Alright, the first ~70ish are actual parsing errors that lead to empty cells. Not great, but also no entries of huge importance^[mostly hard-coded things like ratios or target values that change slightly during a day but stay the same across all days], as far as I can tell. The rest though result from the circumstance that the file is basically seperated in CGM sensor data and insulin pump data, as mentioned in the beginning. Luckily though, `readr`/`vroom` just ignores the two rows where the new table begins - a device description and exactly same column names in the same order as before - and just continues parsing the CGM data. Let's take a look at those whopping 51 Variables:


Looks pretty decent already. That's a whole lotta `<NA>`s, though. We'll have to look into that in another article.

# The Clean-up Procedure

Here's what needs to be done still:

- clean up the column names
- throw out the variables we don't need (spoiler: most of them)
- `time` precision by minutes should suffice
- a combined `datetime` column would be nice
- a column of weekdays, too, just for some quality of life improvement

It also totally makes sense to split pump from CGM data, of course. Since both are structurally identical, though, we'll do that after the clean-up. At this point, we're also only interested in variables that directly deal with glucose measurements, insulin dosage and carbohydrate intake^[other variables contain aforementioned "hard codings" or diagnostics on device usage such as low battery warnings]. 

## Codebook

The variables of interest are:

::: {.fullwidth}

Variable | Renamed to | Description
---------|------------|------------------------------------------------
`Index`  | `index`    | kinda self-explanatory
`Date`   | `date`     | Year-Month-Day
`Time`   | `time`     | hh:mm:ss
`BG Reading (mg/dL)`          | `bg_direct` | a **direct** measurement of blood, usually by pricking a finger
`Sensor Glucose (mg/dL)`      | `bg_sensor` | an _indirect_ measurement of interstitial fluid by the gcm sensor
`Basal Rate (U/h)`            | `basal_rate` | the hourly rate of insulin given (in 'Units'; roughly 100U/ml)
`BWZ BG Input (mg/dL)`        | `wiz_bg`    | blood glucose level (manual input)
`BWZ Carb Input (grams)`      | `wiz_carbs` | carbohydrates (manual input)
`BWZ Carb Ratio (g/U)`        | `wiz_ratio` | ratio of carbs per unit of insulin
`BWZ Correction Estimate (U)` | `wiz_est_correction` | insulin to deliver to correct for too high bg level
`BWZ Food Estimate (U)`       | `wiz_est_food`    | insulin units to deliver for the amount of carbohydrates (carbs / ratio)
`BWZ Unabsorbed Insulin Total (U)` | `wiz_est_unabsorbed` | insulin to _not_ deliver in order to not overcompensate
`Final Bolus Estimate`        | `bolus_final`     | amount of insulin to deliver
`Bolus Volume Delivered (U)`  | `bolus_delivered` | the actual amount of insulin delivered

:::

## Cleaning and Variable Selection

To clean up column names, we could of course use some convenient helper function like `clean_names()` from the `janitor` package:

```{r b2_janitor}
janitor::clean_names(data_raw) %>% names() %>% sort()
```

As you can see, that does indeed make them "workable", but it's still pretty convoluted and even occasionally confusing. Therefore, in a second step, we do some touch-ups manually and get rid of all the columns we're not interested in. And since we're already at it, why not tick off the rest of the items on our list, too?

```{r b2_transmute}
data_full <- data_raw %>% 
  janitor::clean_names() %>% 
  transmute(
    index = index,
    datetime = round_date(ymd_hms(paste(date, time)), unit = "minute"),
    date  = date,
    wday  = wday(date, label = TRUE, week_start = 1),
    time  = time,
    basal_rate = basal_rate_u_h,
    bg_direct  = bg_reading_mg_d_l,
    bg_sensor  = sensor_glucose_mg_d_l,
    wiz_ratio = bwz_carb_ratio_g_u,
    wiz_carbs = bwz_carb_input_grams,
    wiz_bg = bwz_bg_input_mg_d_l,
    wiz_est_correction = bwz_correction_estimate_u,
    wiz_est_food = bwz_food_estimate_u,
    wiz_est_unabsorbed = bwz_unabsorbed_insulin_total_u,
    bolus_final = final_bolus_estimate, 
    bolus_delivered = bolus_volume_delivered_u
  )
```

## 

Another **Warning**, this time a parsing failure? Most certainly either when calling for the weekday labels or concoctenating and rounding the datetime:

```{r b2_inspect1}
anyNA(data_full$wday)

data_full %>% 
  filter(is.na(wday)) %>% 
  glimpse()
```

Two completely empty rows alright. Since even the `index` column is empty, it's probably just an artefact of the two datasets in one file issue. We better check that out, too, though.

::: {.panel-tabset}

## Find Suspects

```{r b2_find_suspects}
anyNA(data_raw$Index)

which(is.na(data_raw$Index))
```

## Glimpse

```{r b2_glimpse_suspects}
data_raw[4336:4339, ] %>% 
  glimpse()
```

:::

That confirms it. Actually, we should throw those lines out right at the beginning of the process.


## Wrap-Up

Doing it all in one go might then look like this:

```{r b3_wrapup}
#| echo: false
#| warning: false
data_full <- read_delim("data/sugr/carelink-export-220217.csv", 
                  delim = ";", escape_double = FALSE, 
                  col_types = cols(Date = col_date(format = "%Y/%m/%d"), 
                                   Time = col_time(format = "%H:%M:%S")), 
                  locale = locale(decimal_mark = ","), 
                  trim_ws = TRUE, skip = 6) %>% 
  janitor::clean_names() %>% 
  filter(!is.na(index)) %>% 
  transmute(
    index              = index,
    datetime_rounded   = round_date(ymd_hms(paste(date, time)), unit = "minute"),
    datetime           = ymd_hms(paste(date, time)),
    date               = date,
    wday               = wday(date, label = TRUE, week_start = 1),
    time               = time,
    basal_rate         = basal_rate_u_h,
    bg_direct          = bg_reading_mg_d_l,
    bg_sensor          = sensor_glucose_mg_d_l,
    wiz_ratio          = bwz_carb_ratio_g_u,
    wiz_carbs          = bwz_carb_input_grams,
    wiz_bg             = bwz_bg_input_mg_d_l,
    wiz_est_correction = bwz_correction_estimate_u,
    wiz_est_food       = bwz_food_estimate_u,
    wiz_est_unabsorbed = bwz_unabsorbed_insulin_total_u,
    bolus_final        = final_bolus_estimate, 
    bolus_delivered    = bolus_volume_delivered_u
  )
```


# Splitting CGM & Pump Data

Now that the whole thing is cleaned up the only thing left to do is splitting pump and sensor data into seperate dataframes. We could of course leave it as is, but a split brings some advantages. At the initial reading of the data we already noticed the - professiponally speakng - sheer insane amount of `NA`s, which we can drastically reduce by the split. Additionally, the (semi-manual) pump data is not in sync with the cgm; while the latter happens very much exactly every 5 minutes^[with an unspecific shift happening once a week whenever the sensor has to be replaced], the former just happens whenever. 