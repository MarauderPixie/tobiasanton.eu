{
  "hash": "aa224cbaca9f774ca02d3aa8822d47d5",
  "result": {
    "markdown": "---\ntitle: \"Stylized Map of Bremen\"\nsubtitle: \"Using publicly available shapefiles and ggplot2\"\ncategories: [sf, geospatial, visualisation]\nimage: \"thumbs/ostvor.png\"\nauthor: \"Tobias\"\ndate: \"09/09/2024\"\ndate-format: medium\ndraft: false\nexecute: \n  eval: false\n---\n\n\n::: tldr\n**tl;dr:** Drawing a beautiful map of my hometown Bremen as an exercise in dealing\nwith geospatial data. This post is **heavily** inspired by [this one from Timo Grossenbacher](https://timogrossenbacher.ch/bivariate-maps-with-ggplot2-and-sf/).\n\n[Link to the github repository](https://github.com/MarauderPixie/Bremap)\n:::\n\n![The final Map](static_files/Karte-Bremen.png){.lightbox}\n\n## The data\n\nAll of the data I used is available from official sources for free. Although I'm \nnot allowed to provide it directly, I'll do my best to describe what exactly I \nused and where you'd get it. \n\nThe different elements of the map come from these shapefiles:\n\n- **Geography:** Instead of using only drawn borders, I'm going for a more organic\nlook. I used the geographies from this INSPIRE dataset.\n- **City districts:** Or \"Verwaltungsgrenzen\" as we say in Germany; we're using \n`hb_ortsteile_BRE.shp`.\n- **Buildings:** Or \"Liegenschaften\", yet another beautiful german administration\nterm; `GebaeudeBauwerk.shp`.\n- **Water bodies:** The shapefile for all things water-y is `gew01_f.shp` and \ncomes from the \"Basis DLM\".\n- **Train tracks:** I like trains and public transport. Again, the file from the \nBasis DLM is `ver03_l.shp`.\n- **Streets:** A file of the \"Strassennetz\", containing pretty much what it says \non the tin.\n\nI also used the Google font **Playfair Display** for all text. I'll just assume \nyou know how to get, install and make it available to **R/ggplot2** - I used the\n`extrafont` package to do so.\n\n\n## Theme and colors\n\nTo make experimentation easier, I defined the colors and other general aesthetic \nelements in a separate file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## colors\ncol_plot_bg <- \"#faf3e1\"\ncol_strokes <- \"#443525\"\ncol_areas   <- \"#efe8e1\"\ncol_water   <- \"#405a75\"\n\npergamono <- c(\"#201912\", \"#413324\", \"#624c36\",\n               \"#836648\", \"#a4805a\", \"#b6997b\",\n               \"#c8b29c\", \"#daccbd\", \"#ece5de\")\n\ncolors_zentrum <- c(\"#bfa58a\",\"#bfb289\",\"#bebf89\",\n                    \"#b1bf89\",\"#a3bf89\",\"#96bf89\")\n\ncolors_ostvor <- c(\"#bfa58a\", \"#96bf89\", \"#bfb289\", \"#bebf89\")\n\n## ggplot theme & defaults\ntheme_set(\n  theme_void() +\n    theme(\n      legend.position = \"none\",\n      panel.border = element_rect(fill = NA, color = col_strokes),\n      panel.background = element_rect(fill = col_plot_bg),\n      plot.background =  element_rect(fill = col_plot_bg),\n      strip.background = element_rect(fill = col_plot_bg),\n    )\n)\n\nupdate_geom_defaults(\"point\", list(colour = col_strokes))\nupdate_geom_defaults(\"line\", list(colour = col_strokes))\nupdate_geom_defaults(\"area\", list(colour = \"transparent\",\n                                  fill   = pergamono[8]))\nupdate_geom_defaults(\"rect\", list(colour = \"transparent\",\n                                  fill   = pergamono[8]))\nupdate_geom_defaults(\"sf\", list(colour = \"transparent\",\n                                fill   = pergamono[8]))\nupdate_geom_defaults(\"density\", list(colour = col_strokes,\n                                     fill   = pergamono[8]))\nupdate_geom_defaults(\"bar\", list(colour = col_plot_bg,\n                                 fill   = pergamono[8]))\nupdate_geom_defaults(\"col\", list(colour = col_plot_bg,\n                                 fill   = pergamono[8]))\nupdate_geom_defaults(\"text\", list(colour = pergamono[2]))\nupdate_geom_defaults(\"label\", list(colour = pergamono[2]))\n```\n:::\n\n\n## Preparing the Map\n\nNot every shapefile is projected onto the same CRS, so that has to change. Also, \nI only want to plot the city of Bremen and a little of the surroundings. Zooming-in \nto the Östliche Vorstadt (the \"Viertel\") needs a lot of subsetting, especially\nof the shapefile containing the buildings. Needless to say, the file paths are\nnot reproducible at all and you'd have to adjust them to suit your setup.\n\n### Main Map - The Whole City\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeografie <- read_sf(\"shapefiles/Geologische_Karte/gk_gdfb_052024_inspire_HB.shp\") %>%\n  st_transform(crs = \"EPSG:5677\") %>%\n  mutate(y = st_coordinates(st_centroid(.))[, 2]) %>%\n  filter(y < 5890000) %>%\n  st_make_valid() %>%\n  select(-y)\nax_gewaesser <- read_sf(\"shapefiles/Basis_DLM/gew01_f.shp\") %>%\n  st_transform(crs = \"EPSG:5677\")\n\nortsteile <- read_sf(\"shapefiles/Verwaltungsgrenzen/hb_ortsteile_BRE.shp\") %>%\n  st_transform(crs = \"EPSG:5677\")\nzentrum <- ortsteile %>%\n  filter(bez_st %in% c(\"Mitte\", \"Neustadt\", \"Östliche Vorstadt\",\n                       \"Schwachhausen\", \"Findorff\"),\n         !(bez_ot %in% c(\"In den Hufen\", \"Riensberg\", \"Huckelriede\",\n                         \"Radio Bremen\", \"Neuenland\", \"Neu-Schwachhausen\")))\n\nstrassen <- read_sf(\"shapefiles/Strassennetz/Strassennetz.shp\") %>%\n  st_transform(crs = \"EPSG:5677\") %>%\n  mutate(y = st_coordinates(st_centroid(.))[, 2]) %>%\n  filter(y < 5920000, StrassenAr != \"G\") %>%\n  select(-y)\nax_bahnstrecke <- read_sf(\"shapefiles/Basis_DLM/ver03_l.shp\") %>%\n  st_transform(crs = \"EPSG:5677\")\n```\n:::\n\n\n### Zoomed Area - Östliche Vorstadt\n\nSince buildings are only needed in the sub-plot and the respective shapefile is \nrather huge, I actually factored out the subsetting of the parts I need - see \n`prep_buildings.R` script in the github repository. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nostvor <- ortsteile %>%\n  filter(bez_st == \"Östliche Vorstadt\")\nbauwerke <- read_sf(\"shapefiles/Liegenschaften/GebaeudeBauwerk.shp\") %>%\n  st_transform(crs = \"EPSG:5677\")\n\nzentrum_bauwerke <- bauwerke[zentrum, ]\nostvor_bauwerke  <- zentrum_bauwerke[ostvor, ]\n\nostvor_buff <- ostvor %>%\n  st_centroid() %>%\n  st_buffer(1000) \n\nostvor_bbox <- ostvor_buff %>%\n  st_bbox() %>%\n  st_as_sfc()\nbbox_wasser <- ostvor_buff %>%\n  st_bbox() %>%\n  st_as_sfc() %>%\n  st_intersection(ax_gewaesser)\nbbox_bauwerke <- ostvor_bbox %>% \n  st_intersection(bauwerke)\n```\n:::\n\n\nI also create a tibble to make the annotations somewhat more data-driven^[Again, \ncredit goes to Timo's work for this part in particular!]. I did some legwork to \nfind the coordinates for the labels, see the bonus bit at the end.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nostvor_centroids <- ostvor %>%\n  st_centroid() %>%\n  st_coordinates() %>%\n  as_tibble()\n\nostvor_annotations <- tibble(\n  ortsteil = ostvor$bez_ot,\n  x = c(3487947, 3489651, 3488957, 3488278),\n  xend = ostvor_centroids$X,\n  y = c(5882982, 5883134, 5880991, 5881416),\n  yend = ostvor_centroids$Y,\n  curvature = c(0.2, 0.1, -0.1, -0.2),\n  nudge_x = c(0, 50, -50, -50),\n  nudge_y = c(50, 0, 0, 0),\n  hjust = c(.5, 0, 1, 1),\n  vjust = c(0, .5, .5, .5)\n)\n```\n:::\n\n\n\n## Get mappin'!\n\nNow to create the actual map. One final bit beforehand is a somewhat hack-ish \napproach to get rid of bits of districts or the geography that overlaps with the \nwater bodies. This is not a very clean or even necessary thing to do, but while\nworking on the map I liked to adjust the transparancy of the water color instead \nof the water color itself. I encourage you to plot the map with and without these\nbits to get a better idea of what I mean.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninter_geografie <- st_intersection(ax_gewaesser, geografie)\ninter_zentrum   <- st_intersection(ax_gewaesser, zentrum)\ninter_ostvor <- st_intersection(bbox_wasser, ostvor)\n```\n:::\n\n\n### Main Map\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmain_area <- ggplot() +\n  scale_fill_manual(values = colors_zentrum) +\n  scale_color_manual(values = colors_zentrum) +\n  geom_sf(data = geografie) +\n  geom_sf(data = inter_geografie, fill = col_plot_bg) +\n  geom_sf(data = zentrum, aes(fill = bez_st)) +\n  geom_sf(data = inter_zentrum, fill = col_plot_bg) +\n  # use st_buffer() to make tracks, streets and water bodies look more organic\n  geom_sf(data = ax_gewaesser[st_buffer(ortsteile, 1000), ], \n          fill = col_water, alpha = .8) +\n  geom_sf(data = ax_bahnstrecke[st_buffer(ortsteile, 1500), ],\n          color = \"#624c36\", linewidth = .3, linetype = 6) +\n  geom_sf(data = strassen[st_buffer(ortsteile, 1200), ],\n          color = \"#a4a4a4\", linewidth = .5) +\n  geom_text(aes(x = 3502357, y = 5899710, label = \"Hansestadt Bremen\"),\n            family = \"Playfair Display ExtraBold\", size.unit = \"pt\", size = 44,\n            hjust = 1, vjust = 1) +\n  # draw a rectangle around the area we're about zoom-in on\n  geom_sf(data = ostvor_bbox,\n          fill = \"transparent\", color = pergamono[3],\n          linetype = \"5151\", linewidth = .75)\n```\n:::\n\n\n### Zoomed Area\n\n\n::: {.cell}\n\n```{.r .cell-code}\nzoom_area <- ggplot() +\n  scale_fill_manual(values = colors_ostvor) +\n  scale_color_manual(values = colors_ostvor) +\n  geom_sf(data = ostvor, aes(fill = bez_ot), \n          alpha = 1, color = col_plot_bg) +\n  geom_sf(data = inter_ostvor, fill = col_plot_bg) +\n  geom_sf(data = bbox_wasser, fill = col_water, alpha = .8) +\n  geom_sf(data = bbox_bauwerke, color = pergamono[8]) +\n  geom_sf(data = ostvor_bauwerke, color = pergamono[5]) +\n  geom_curve(data = ostvor_annotations, curvature = .2,\n             aes(x = x, xend = xend, y = y, yend = yend),\n             color = pergamono[3]) +\n  geom_label(data = ostvor_annotations, family = \"Playfair Display Medium\",\n             aes(x = x, y = y, label = ortsteil, hjust = hjust, vjust = vjust),\n             nudge_x = ostvor_annotations$nudge_x, nudge_y = ostvor_annotations$nudge_y,\n             alpha = .6, fill = col_plot_bg, label.padding = unit(0.2, \"lines\"),\n             label.r = unit(0.1, \"lines\"), label.size = 0, color = pergamono[2]) +\n  geom_label(aes(x = 3487664, y = 5883384, label = \"Östliche Vorstadt\"),\n             family = \"Playfair Display SemiBold\", size.unit = \"pt\", size = 20,\n             alpha = .6, fill = col_plot_bg, label.padding = unit(0.2, \"lines\"),\n             label.r = unit(0.1, \"lines\"), label.size = 0,\n             hjust = 0, vjust = 0, nudge_x = -30)\n```\n:::\n\n\n### Tying it all together\n\nI use the `patchwork` package to place the zoomed area on the bottom-left of the\nmain area.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmain_area + inset_element(\n  zoom_area,\n  right = .4,\n  top = .6,\n  left = unit(0, 'npc') + unit(.5, 'cm'),\n  bottom = unit(0, 'npc') + unit(.5, 'cm')\n)\n```\n:::\n\n\n![](static_files/Karte-Bremen.png)\n\n# Bonus: finding coordinates to place text & labels",
    "supporting": [
      "brem-stylized_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}