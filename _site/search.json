[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tobias Anton",
    "section": "",
    "text": "With a passion for telling stories with data, I’m especially interested in data visualisation and the psychological and perceptual pitfalls thereof. Apart from that I just enjoy the collaborative storytelling that are tabletop and pen & paper RPGs.\n\n\nM. Sc. Cogntive Science | Artificial Intelligence & Cognitive Psychology\nUniversität Osnabrück | Oct 2018 - Dec 2022\nB. Sc. Psychology | Work- and Organisational Psychology and Neuroscience\nUniversität Bremen | Oct 2014 - June 2018\n\n\n\nAdvanced Bayesian Data Analysis | Tutor / Research Assistant | April 2021 - Sept 2021\nQuantitative Methods I & II | Tutor / Lecturer | Oct 2015 - Sept 2018"
  },
  {
    "objectID": "packages.html",
    "href": "packages.html",
    "title": "R Packages",
    "section": "",
    "text": "A convenient way to access the spotify API in bulk in a tidyverse-y way. This package never got around to find a convenient way to initialize thing"
  },
  {
    "objectID": "packages.html#ddater",
    "href": "packages.html#ddater",
    "title": "R Packages",
    "section": "ddateR",
    "text": "ddateR\nHail Eris! A perpetual date converter from the gregorian to the poee calendar. Basically an R implementation of the ddate function from util-linux."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Skill Check Comparison\n\n\nSome dice roll simulations to compare skill check mechanics from various TTRPGs\n\n\n\n\n\n\nFeb 6, 2023\n\n\nTobias\n\n\n\n\n\n\n  \n\n\n\n\nsugr: data preparation\n\n\nPreparation of Continouos Glucose Measurements for usage in a shiny app\n\n\n\n\n\n\nInvalid Date\n\n\nTobias\n\n\n\n\n\n\n  \n\n\n\n\nsugr: make it shiny\n\n\nA shiny app to conveniently browse blood glucose history\n\n\n\n\n\n\nInvalid Date\n\n\nTobias\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/skillcheck.html",
    "href": "projects/skillcheck.html",
    "title": "Skill Check Comparison",
    "section": "",
    "text": "tl;dr: I wrote this once already, then the IDE just… quit. Now I’m not inclined to repeat myself anytime soon. >=("
  },
  {
    "objectID": "projects/skillcheck.html#additional-mechanics",
    "href": "projects/skillcheck.html#additional-mechanics",
    "title": "Skill Check Comparison",
    "section": "Additional Mechanics",
    "text": "Additional Mechanics\nI guess? Idk yet."
  },
  {
    "objectID": "projects/skillcheck.html#sequential-cut-offs",
    "href": "projects/skillcheck.html#sequential-cut-offs",
    "title": "Skill Check Comparison",
    "section": "Sequential Cut-Offs",
    "text": "Sequential Cut-Offs\nSince it’s not possible to have 3 qualites with only one die by Shadowrun standarts (the roll is either a success or not), we’ll start with 2d6:\n\n\n\n\n\nOk, maybe we need to zoom in a bit."
  },
  {
    "objectID": "projects/sugr-prep.html",
    "href": "projects/sugr-prep.html",
    "title": "sugr: data preparation",
    "section": "",
    "text": "tl;dr: CGMs are a great source of (timeseries) data to tinker with. Here I describe the process of cleaning up and preparing the data of Medtronics systems in order to use it in a shiny app."
  },
  {
    "objectID": "projects/sugr-shiny.html",
    "href": "projects/sugr-shiny.html",
    "title": "sugr: make it shiny",
    "section": "",
    "text": "Nothing yet\nJust some placeholder document for now."
  },
  {
    "objectID": "projects/sugr-prep.html#codebook",
    "href": "projects/sugr-prep.html#codebook",
    "title": "sugr: data preparation",
    "section": "Codebook",
    "text": "Codebook\nThe variables of interest are:\n\n\n\n\n\n\n\n\nVariable\nRenamed to\nDescription\n\n\n\n\nIndex\nindex\nkinda self-explanatory\n\n\nDate\ndate\nYear-Month-Day\n\n\nTime\ntime\nhh:mm:ss\n\n\nBG Reading (mg/dL)\nbg_direct\na direct measurement of blood, usually by pricking a finger\n\n\nSensor Glucose (mg/dL)\nbg_sensor\nan indirect measurement of interstitial fluid by the gcm sensor\n\n\nBasal Rate (U/h)\nbasal_rate\nthe hourly rate of insulin given (in ‘Units’; roughly 100U/ml)\n\n\nBWZ BG Input (mg/dL)\nwiz_bg\nblood glucose level (manual input)\n\n\nBWZ Carb Input (grams)\nwiz_carbs\ncarbohydrates (manual input)\n\n\nBWZ Carb Ratio (g/U)\nwiz_ratio\nratio of carbs per unit of insulin\n\n\nBWZ Correction Estimate (U)\nwiz_est_correction\ninsulin to deliver to correct for too high bg level\n\n\nBWZ Food Estimate (U)\nwiz_est_food\ninsulin units to deliver for the amount of carbohydrates (carbs / ratio)\n\n\nBWZ Unabsorbed Insulin Total (U)\nwiz_est_unabsorbed\ninsulin to not deliver in order to not overcompensate\n\n\nFinal Bolus Estimate\nbolus_final\namount of insulin to deliver\n\n\nBolus Volume Delivered (U)\nbolus_delivered\nthe actual amount of insulin delivered\n\n\n\nTo clean up column names, we could of course use some convenient helper function like clean_names() from the janitor package:\n\njanitor::clean_names(data_raw) %>% names() %>% sort()\n\n [1] \"alarm\"                               \"basal_rate_u_h\"                     \n [3] \"bg_reading_mg_d_l\"                   \"bg_source\"                          \n [5] \"ble_network_device\"                  \"bolus_cancellation_reason\"          \n [7] \"bolus_duration_h_mm_ss\"              \"bolus_number\"                       \n [9] \"bolus_source\"                        \"bolus_type\"                         \n[11] \"bolus_volume_delivered_u\"            \"bolus_volume_selected_u\"            \n[13] \"bwz_active_insulin_u\"                \"bwz_bg_input_mg_d_l\"                \n[15] \"bwz_carb_input_grams\"                \"bwz_carb_ratio_g_u\"                 \n[17] \"bwz_correction_estimate_u\"           \"bwz_estimate_u\"                     \n[19] \"bwz_food_estimate_u\"                 \"bwz_insulin_sensitivity_mg_d_l_u\"   \n[21] \"bwz_status\"                          \"bwz_target_high_bg_mg_d_l\"          \n[23] \"bwz_target_low_bg_mg_d_l\"            \"bwz_unabsorbed_insulin_total_u\"     \n[25] \"date\"                                \"event_marker\"                       \n[27] \"final_bolus_estimate\"                \"index\"                              \n[29] \"insulin_action_curve_time\"           \"isig_value\"                         \n[31] \"linked_bg_meter_id\"                  \"network_device_associated_reason\"   \n[33] \"network_device_disassociated_reason\" \"network_device_disconnected_reason\" \n[35] \"new_device_time\"                     \"preset_bolus\"                       \n[37] \"preset_temp_basal_name\"              \"prime_type\"                         \n[39] \"prime_volume_delivered_u\"            \"rewind\"                             \n[41] \"scroll_step_size\"                    \"sensor_calibration_bg_mg_d_l\"       \n[43] \"sensor_calibration_rejected_reason\"  \"sensor_exception\"                   \n[45] \"sensor_glucose_mg_d_l\"               \"suspend\"                            \n[47] \"temp_basal_amount\"                   \"temp_basal_duration_h_mm_ss\"        \n[49] \"temp_basal_type\"                     \"time\"                               \n[51] \"x51\"                                \n\n\nAs you can see, that does indeed make them “workable”, but it’s still pretty convoluted and even confusing occasionally. Therefore, in a second step, we do some touch-ups manually and get rid of all the columns we’re not interested in. And since we’re already at it, why not tick off the rest of the items on our list, too?\n\ndata_full <- data_raw %>% \n  janitor::clean_names() %>% \n  transmute(\n    index = index,\n    datetime = round_date(ymd_hms(paste(date, time)), unit = \"minute\"),\n    date  = date,\n    wday  = wday(date, label = TRUE, week_start = 1),\n    time  = time,\n    basal_rate = basal_rate_u_h,\n    bg_direct  = bg_reading_mg_d_l,\n    bg_sensor  = sensor_glucose_mg_d_l,\n    wiz_ratio = bwz_carb_ratio_g_u,\n    wiz_carbs = bwz_carb_input_grams,\n    wiz_bg = bwz_bg_input_mg_d_l,\n    wiz_est_correction = bwz_correction_estimate_u,\n    wiz_est_food = bwz_food_estimate_u,\n    wiz_est_unabsorbed = bwz_unabsorbed_insulin_total_u,\n    bolus_final = final_bolus_estimate, \n    bolus_delivered = bolus_volume_delivered_u\n  )\n\nWarning: 2 failed to parse.\n\ndata_full\n\n# A tibble: 9,236 × 16\n   index datetime            date       wday  time     basal_r…¹ bg_di…² bg_se…³\n   <dbl> <dttm>              <date>     <ord> <time>       <dbl>   <dbl>   <dbl>\n 1     0 2022-02-17 11:08:00 2022-02-17 Do    11:07:38     NA         NA      NA\n 2     1 2022-02-17 11:03:00 2022-02-17 Do    11:02:39     NA         NA      NA\n 3     2 2022-02-17 11:00:00 2022-02-17 Do    11:00:00      0.65      NA      NA\n 4     3 2022-02-17 10:58:00 2022-02-17 Do    10:57:42     NA         NA      NA\n 5     4 2022-02-17 10:53:00 2022-02-17 Do    10:52:42     NA         NA      NA\n 6     5 2022-02-17 10:38:00 2022-02-17 Do    10:37:45     NA         NA      NA\n 7     6 2022-02-17 10:33:00 2022-02-17 Do    10:32:49     NA         NA      NA\n 8     7 2022-02-17 10:28:00 2022-02-17 Do    10:27:48     NA         NA      NA\n 9     8 2022-02-17 10:28:00 2022-02-17 Do    10:27:46     NA         NA      NA\n10     9 2022-02-17 10:23:00 2022-02-17 Do    10:22:52     NA         NA      NA\n# … with 9,226 more rows, 8 more variables: wiz_ratio <dbl>, wiz_carbs <dbl>,\n#   wiz_bg <dbl>, wiz_est_correction <dbl>, wiz_est_food <dbl>,\n#   wiz_est_unabsorbed <dbl>, bolus_final <dbl>, bolus_delivered <dbl>, and\n#   abbreviated variable names ¹​basal_rate, ²​bg_direct, ³​bg_sensor\n# ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names"
  }
]